{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","input","setInput","formula","setFormula","result","setRresult","lastButton","setLastButton","displayResult","setDispayResult","useEffect","prevResult","eval","slice","join","includes","clear","param","backspace","parseInt","length","prevInput","numInput","button","newInput","target","value","test","validatedInput","v","negate","toString","opInput","operator","prevFormula","equals","id","concat","Button","onClick","props","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ae58c48e.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport \"./App.css\";\r\n\r\nfunction App() {\r\n  const [input, setInput] = useState(\"0\");\r\n  const [formula, setFormula] = useState([]);\r\n  const [result, setRresult] = useState(\"\");\r\n  const [lastButton, setLastButton] = useState(\"\");\r\n  const [displayResult, setDispayResult] = useState(false);\r\n\r\n  /* Calculating the latest result whenever the formula is updated. */\r\n  useEffect(() => {\r\n    if (input !== \"0\") {\r\n      setRresult((prevResult) =>\r\n        eval([prevResult, ...formula.slice(-3, -1)].join(\"\"))\r\n      );\r\n    }\r\n    if (![\"CE\", \"number\"].includes(lastButton)) {\r\n      //Avoiding resetting the input after overwriting results from equals\r\n      setInput(\"0\");\r\n    }\r\n  }, [formula]);\r\n\r\n  const clear = (param) => {\r\n    setLastButton(typeof param === \"object\" ? \"CE\" : \"number\");\r\n    setInput(typeof param === \"object\" ? \"0\" : param);\r\n    setFormula([]);\r\n    setRresult(\"\");\r\n    setDispayResult(false);\r\n  };\r\n\r\n  const backspace = () => {\r\n    if ([\"number\"].includes(lastButton)) {\r\n      if (\r\n        (parseInt(input) > 0 && input.length > 1) ||\r\n        (parseInt(input) < 0 && input.length > 2)\r\n      ) {\r\n        setInput((prevInput) => prevInput.slice(0, prevInput.length - 1));\r\n      } else {\r\n        setInput(\"0\");\r\n      }\r\n    }\r\n  };\r\n\r\n  /* Handling numeral input*/\r\n  const numInput = (button) => {\r\n    setLastButton(\"number\");\r\n    let newInput = button.target.value;\r\n    setDispayResult(false);\r\n    let decimal = /\\./;\r\n    let number = /[0-9]/;\r\n    if (![\"=\", \"CE\"].includes(lastButton)) {\r\n      /* Dismissing starting zeroes and lone decimal signs */\r\n      if (number.test(newInput) || (newInput === \".\" && !decimal.test(input))) {\r\n        setInput((prevInput) => (input !== \"0\" ? prevInput : \"\") + newInput);\r\n      }\r\n      /* Clearing everything if a number is entered immediatelty after equals */\r\n    } else {\r\n      clear(newInput);\r\n    }\r\n  };\r\n\r\n  /* Changing lone decimal signes into zero */\r\n  const validatedInput = (v) => {\r\n    if (v === \".\") {\r\n      return \"0\";\r\n    } else {\r\n      return v;\r\n    }\r\n  };\r\n\r\n  /* Negating the current input */\r\n  const negate = () => {\r\n    setLastButton(\"number\");\r\n    setDispayResult(false);\r\n    if (lastButton !== \"=\") {\r\n      setInput((prevInput) => (validatedInput(prevInput) * -1).toString());\r\n      /* Negating the result if pressed immediately after equals */\r\n    } else {\r\n      clear((result * -1).toString());\r\n    }\r\n  };\r\n\r\n  /* Handling oprerator inputs */\r\n  const opInput = (button) => {\r\n    setLastButton(button.target.value);\r\n    let operator = button.target.value;\r\n    if (lastButton !== \"=\") {\r\n      if (input !== \"0\") {\r\n        setFormula((prevFormula) => [\r\n          ...prevFormula,\r\n          validatedInput(input),\r\n          operator,\r\n        ]);\r\n        /* Switching operators when input is zero */\r\n      } else {\r\n        setFormula((prevFormula) => [...prevFormula.slice(0, -1), operator]);\r\n      }\r\n    } else {\r\n      setFormula((prevFormula) => [...prevFormula.slice(0, -1), operator]);\r\n    }\r\n    setDispayResult(true);\r\n  };\r\n\r\n  const equals = () => {\r\n    if (lastButton !== \"=\") {\r\n      setLastButton(\"=\");\r\n      setFormula((prevFormula) => [...prevFormula, validatedInput(input), \"=\"]);\r\n      setDispayResult(true);\r\n    }\r\n  };\r\n  return (\r\n    <div id=\"App\">\r\n      <div id=\"display\">\r\n        <p id=\"formula\">\r\n          {lastButton !== \"=\"\r\n            ? displayResult\r\n              ? formula.slice(0, -1).concat(\"=\", result)\r\n              : formula.slice(0, -1)\r\n            : formula}\r\n        </p>\r\n        <p id=\"input\">\r\n          {lastButton !== \"=\"\r\n            ? displayResult\r\n              ? formula[formula.length - 1]\r\n              : formula.length !== 0\r\n              ? formula[formula.length - 1] + input\r\n              : input\r\n            : result}\r\n        </p>\r\n      </div>\r\n\r\n      <Button id=\"clear\" value=\"CE\" onClick={clear} />\r\n      <Button id=\"backspace\" value=\"&larr;\" onClick={backspace} />\r\n\r\n      <Button id=\"seven\" value=\"7\" onClick={numInput} />\r\n      <Button id=\"eight\" value=\"8\" onClick={numInput} />\r\n      <Button id=\"nine\" value=\"9\" onClick={numInput} />\r\n      <Button id=\"divide\" value=\"/\" onClick={opInput} />\r\n\r\n      <Button id=\"four\" value=\"4\" onClick={numInput} />\r\n      <Button id=\"five\" value=\"5\" onClick={numInput} />\r\n      <Button id=\"six\" value=\"6\" onClick={numInput} />\r\n      <Button id=\"multiply\" value=\"*\" onClick={opInput} />\r\n\r\n      <Button id=\"one\" value=\"1\" onClick={numInput} />\r\n      <Button id=\"two\" value=\"2\" onClick={numInput} />\r\n      <Button id=\"three\" value=\"3\" onClick={numInput} />\r\n      <Button id=\"subtract\" value=\"-\" onClick={opInput} />\r\n\r\n      <Button id=\"negate\" value=\"+/-\" onClick={negate} />\r\n      <Button id=\"zero\" value=\"0\" onClick={numInput} />\r\n      <Button id=\"decimal\" value=\".\" onClick={numInput} />\r\n      <Button id=\"add\" value=\"+\" onClick={opInput} />\r\n\r\n      <Button id=\"equals\" value=\"=\" onClick={equals} />\r\n    </div>\r\n  );\r\n}\r\n\r\nconst Button = (props) => {\r\n  return (\r\n    <button id={props.id} value={props.value} onClick={props.onClick}>\r\n      {props.value}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}